name: CI Pipeline

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["main"]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: yarn install --frozen-lockfile
      - run: yarn lint

  test:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: yarn install --frozen-lockfile
      - name: Run tests with coverage
        run: yarn test --coverage
      - name: Show coverage file
        run: ls -R coverage

      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          args: >
            -Dsonar.projectKey=Anaaaslagi_pso-backups
            -Dsonar.organization=anaaaslagi
            -Dsonar.sources=src
            -Dsonar.exclusions=**/node_modules/**,**/.next/**,**/public/**
            -Dsonar.test.inclusions=**/__tests__/**,**/*.test.js
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info


  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - run: yarn install --frozen-lockfile
      - run: yarn build

  dockerize:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Build Docker image
        run: |
          IMAGE="${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/docker-repo/notea:latest"
          docker build -t $IMAGE .
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Push Docker image to Artifact Registry
        run: docker push $IMAGE
        env:
          IMAGE: ${{ env.IMAGE }}